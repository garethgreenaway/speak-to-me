import hashlib

from django.contrib.auth.models import User
from django.db import models
from django.db.models.signals import post_save

from taggit.managers import TaggableManager

class Headshot(models.Model):
    filename = models.CharField(max_length=100)

class Location(models.Model):
    nickname = models.CharField(max_length=100, verbose_name="Nick Name")

    street_address = models.CharField(max_length=100)
    street_address_hidden = models.BooleanField(verbose_name="Hidden")
    
    city = models.CharField(max_length=100)
    city_hidden = models.BooleanField(verbose_name="Hidden")
    
    state = models.CharField(max_length=100, verbose_name="State / Province")
    country = models.CharField(max_length=100)
    postalcode = models.CharField(max_length=100)
    
    longitude = models.CharField(max_length=100)
    latitude = models.CharField(max_length=100)

    def __unicode__(self):
        return "%s, %s, %s, %s" % (self.street_address, self.city, self.state, self.country)

class Presentation(models.Model):
    PRESENTATION_LENGTH = (
      ('5','5 minutes'),
      ('30','30 minutes'),
      ('45','45 minutes'),
      ('90','90 minutes'),
    )
    
    presentation_title = models.CharField(max_length=100, verbose_name="Title")
    presentation_length = models.CharField(max_length=3, verbose_name="Length", choices=PRESENTATION_LENGTH)
    presentation_hidden = models.BooleanField()
    presentation_thumbnail = models.CharField(max_length=100)
    presentation_pdf = models.CharField(max_length=100)
    presentation_pdf_url = models.CharField(max_length=100)    
    presentation_slides = models.CharField(max_length=100)
    presentation_slides_url = models.CharField(max_length=100)        
    presentation_description = models.CharField(max_length=700, verbose_name="Description")
    #presentation_topics = models.CharField(max_length=100, verbose_name="Topics")
    presentation_topics = TaggableManager(verbose_name="Topics")    
    presentation_hash = models.CharField(max_length=36)    
    
    # This will get generated on conversion, in tasks.py
    def generate_hash(self, name):
      h = hashlib.md5()
      h.update(name)
      self.presentation_hash = h.hexdigest()    

class UserProfile(models.Model):
    user = models.ForeignKey(User, unique=True)
    
    user_hash = models.CharField(max_length=36)
    
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    languages = TaggableManager(verbose_name="Languages", blank=True)
    company = models.CharField(max_length=100, blank=True)
    personal_bio = models.CharField(max_length=700)
    twitter_url = models.CharField(max_length=100, blank=True, verbose_name="Twitter")
    gplus_url = models.CharField(max_length=100, blank=True, verbose_name="Google Plus")
    website_url = models.CharField(max_length=100, blank=True, verbose_name="Website")
    
    headshots = models.ManyToManyField(Headshot)    
    presentations = models.ManyToManyField(Presentation)    
    locations = models.ManyToManyField(Location)
    
    #follow = models.ManyToManyField(UserProfile)
    
    new_profile = models.BooleanField(default=True)
        
    def generate_hash(self):
      h = hashlib.md5()
      h.update(self.user.email)
      self.user_hash = h.hexdigest()

User.profile = property(lambda u: UserProfile.objects.get_or_create(user=u)[0])






